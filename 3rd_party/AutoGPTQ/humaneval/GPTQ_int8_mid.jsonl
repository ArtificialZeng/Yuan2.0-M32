{"task_id": "HumanEval/0", "completion": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    current_group = ''\n    \n    for char in paren_string:\n        if char == '(':\n            if current_group:\n                groups.append(current_group)\n                current_group = ''\n        elif char == ')':\n            if current_group:\n                groups.append(current_group)\n                current_group = ''\n        else:\n            current_group += char\n    \n    if current_group:\n        groups.append(current_group)\n    \n    return groups\n"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part\n"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    for i in range(1, len(operations)):\n        if operations[i] < operations[i-1]:\n            return True\n    return False\n"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(num - mean) for num in numbers]\n    return sum(absolute_deviations) / len(absolute_deviations)\n"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers, delimeter):\n    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result\n"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string):\n    stack = []\n    levels = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n            else:\n                levels.append(0)\n        else:\n            levels.append(len(stack))\n    return levels\n"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings\n"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    sum_val = 0\n    product_val = 1\n    \n    for num in numbers:\n        sum_val += num\n        product_val *= num\n    \n    return (sum_val, product_val)\n"}
{"task_id": "HumanEval/9", "completion": "from typing import List, Tuple\n\ndef rolling_max(numbers):\n    max_value = numbers[0]\n    result = [max_value]\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_value:\n            max_value = numbers[i]\n        result.append(max_value)\n    return result\n"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" 检查给定的字符串是否是回文。 \"\"\"\n    return string == string[::-1]\ndef make_palindrome(string: str) -> str:\n    \"\"\"找到以给定的字符串开头的最短回文。算法思想很简单：-找到给定字符串的最长回文后缀。—将回文后缀前的字符串反转，附加到给定字符串的末尾。\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    else:\n        return string + string[::-1]\n"}
{"task_id": "HumanEval/11", "completion": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += \"0\"\n        else:\n            result += \"1\"\n    return result\n"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    \n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n    \n    return longest_str\n"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a\n"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(len(string)):\n        prefix = string[:i+1]\n        prefixes.append(prefix)\n    return prefixes\n"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1))\n"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    distinct_chars = set()\n    for char in string.lower():\n        if char.isalpha():\n            distinct_chars.add(char)\n    return len(distinct_chars)\n"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\ndef parse_music(music_string):\n    notes = []\n    current_note = ''\n    for char in music_string:\n        if char == 'o':\n            notes.append(4)\n            current_note = ''\n        elif char == '|':\n            notes.append(2)\n            current_note = ''\n        elif char == '.':\n            notes.append(1)\n            current_note = ''\n        else:\n            current_note += char\n    return notes\n"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\ndef sort_numbers(numbers):\n    numbers = numbers.split()\n    numbers = [int(num) for num in numbers]\n    numbers.sort()\n    return ' '.join(str(num) for num in numbers)\n"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers):\n    closest_pair = None\n    min_diff = float('inf')\n    \n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                closest_pair = (numbers[i], numbers[j])\n    \n    return closest_pair\n"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    scaled_numbers = [(num - min_num) / (max_num - min_num) for num in numbers]\n    return scaled_numbers\n"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]\n"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)\n"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    \n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n    \n    return factors\n"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers):\n    counts = {}\n    for num in numbers:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    \n    result = []\n    for num in numbers:\n        if counts[num] == 1:\n            result.append(num)\n    \n    return result\n"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result\n"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\n"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]\n"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [x for x in l if x > 0]\n"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    求解点x处系数为xs的多项式。\n    返回xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n。\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\ndef find_zero(xs: list):\n    \"\"\"\n    xs是多项式的系数。find_zero返回poly(x)= 0时的解。函数find_zero只返回一个零点，即使有多个零点。此外，函数find_zero只接受具有偶数个系数和最大非零系数的列表xs，因为这样可以保证有一个解。\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"系数列表xs必须具有偶数个系数\")\n    if max(xs) == 0:\n        raise ValueError(\"系数列表xs的最大系数不能为0\")\n    # 使用牛顿迭代法求解多项式零点\n    def newton_method(x):\n        return poly(xs, x)\n    def derivative(x):\n        return poly([coeff * i for i, coeff in enumerate(xs)], x)\n    def newton_step(x):\n        return x - newton_method(x) / derivative(x)\n    x = 0.0\n    while True:\n        if abs(newton_method(x)) < 1e-10:\n            return round(x, 2)\n        x = newton_step(x)\n"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l):\n    l_prime = []\n    for i in range(len(l)):\n        if i % 3 != 0:\n            l_prime.append(l[i])\n    l_prime.sort()\n    return l_prime\n"}
{"task_id": "HumanEval/34", "completion": "def unique(l):\n    return list(set(l))\n# 测试样例\nprint(unique([5, 3, 5, 2, 3, 3, 9, 0, 123]))\n"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    return max(l)\n"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n):\n    count = 0\n    for num in range(1, n+1):\n        if num % 11 == 0 or num % 13 == 0:\n            if '7' in str(num):\n                count += 1\n    return count\n"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l):\n    l_prime = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_prime.append(l[i])\n    return l_prime\n"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    \"\"\"\n    返回通过循环移动3个字符编码的字符串。\n    \"\"\"\n    # 将字符串拆分为组，每个组的长度为3。\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # 在每个组中循环元素，除非该组的元素少于3个。\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\ndef decode_cyclic(s: str):\n    \"\"\"\n    输入encode_cyclic函数编码的字符串，返回解码后的字符串。\n    \"\"\"\n    # 将字符串拆分为组，每个组的长度为3。\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # 在每个组中循环元素，除非该组的元素少于3个。\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # 将每个组的元素拼接起来。\n    return \"\".join(groups)\n"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n):\n    fib_list = [0, 1]\n    while len(fib_list) < n:\n        next_num = fib_list[-1] + fib_list[-2]\n        if is_prime(next_num):\n            fib_list.append(next_num)\n    return fib_list[-1]\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    if len(l) < 3:\n        return False\n    for i in range(len(l) - 2):\n        if l[i] + l[i+1] + l[i+2] == 0:\n            return True\n    return False\n"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n):\n    collisions = 0\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                collisions += 1\n    return collisions\n"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [x + 1 for x in l]\n"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    digits = '0123456789ABCDEF'\n    result = ''\n    while x > 0:\n        remainder = x % base\n        result = digits[remainder] + result\n        x = x // base\n    return result\n"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"\n    计算三角形的面积\n    参数：\n    a -- 三角形的一条边长\n    h -- 三角形的高\n    返回值：\n    三角形的面积\n    \"\"\"\n    return 0.5 * a * h\n"}
{"task_id": "HumanEval/46", "completion": "def fib4(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        fib_list = [0, 0, 2]\n        for i in range(3, n+1):\n            fib_list.append(fib_list[i-1] + fib_list[i-2] + fib_list[i-3] + fib_list[i-4])\n        return fib_list[n]\n"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n    else:\n        return l[n // 2]\n"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    return text == text[::-1]\n"}
{"task_id": "HumanEval/49", "completion": "def modp(n, p):\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return (modp(n // 2, p) ** 2) % p\n    else:\n        return (modp(n - 1, p) ** 2) % p\n"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    \"\"\"\n    返回通过在字母表中将每个字符移动5位得到的编码字符串。\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\ndef decode_shift(s: str):\n    \"\"\" \n    输入encode_shift函数编码的字符串。返回解码的字符串。\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = ''\n    for char in text:\n        if char.lower() not in vowels:\n            result += char\n    return result\n"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    for num in l:\n        if num >= t:\n            return False\n    return True\n"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    return x + y\n"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0, s1):\n    if len(s0) != len(s1):\n        return False\n    \n    char_count = {}\n    for char in s0:\n        char_count[char] = char_count.get(char, 0) + 1\n    \n    for char in s1:\n        if char not in char_count or char_count[char] == 0:\n            return False\n        char_count[char] -= 1\n    \n    return True\n"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0 or stack[-1] != \"<\":\n                return False\n            stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l):\n    if l == sorted(l):\n        return True\n    elif l == sorted(l, reverse=True):\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    set1 = set(l1)\n    set2 = set(l2)\n    return list(set1.intersection(set2))\n# 测试样例\nprint(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))  # [1, 5, 653]\nprint(common([5, 3, 2, 8], [3, 2]))  # [2, 3]\n"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    if n <= 0:\n        return 0\n    else:\n        return n * (n + 1) // 2\n"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0 or stack[-1] != '(':\n                return False\n            stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs):\n    result = []\n    for i in range(1, len(xs)):\n        result.append(i * xs[i])\n    return result\n"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fib_list = [0, 0, 1]\n        for i in range(3, n+1):\n            fib_list.append(fib_list[i-1] + fib_list[i-2] + fib_list[i-3])\n        return fib_list[n]\n"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    digits = str(x)\n    shift %= len(digits)\n    if shift == 0:\n        return digits\n    else:\n        return digits[-shift:] + digits[:-shift]\n"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total\n"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s,n):\n    apples = int(s.split(\" apples and \")[0])\n    oranges = int(s.split(\" apples and \")[1].split(\" oranges\")[0])\n    mango = n - apples - oranges\n    return mango\n"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    if not arr:\n        return []\n    min_even = float('inf')\n    min_even_index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < min_even:\n            min_even = num\n            min_even_index = i\n    return [min_even, min_even_index]\n"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    count = {}\n    for num in lst:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    \n    max_freq = -1\n    for num in lst:\n        if count[num] >= num:\n            max_freq = max(max_freq, num)\n    \n    return max_freq if max_freq != -1 else -1\n"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    if not lst:\n        return []\n    min_val = min(lst)\n    max_val = max(lst)\n    result = []\n    for num in lst:\n        if num == min_val:\n            result.append(max_val)\n        elif num == max_val:\n            result.append(min_val)\n        else:\n            result.append(num)\n    return result\n"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q,w):\n    if sum(q) <= w and q == q[::-1]:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    if n <= 2:\n        return 0\n    \n    left = 0\n    right = n - 1\n    count = 0\n    \n    while left < right:\n        if arr[left] != arr[right]:\n            count += 1\n            if arr[left] == arr[right-1]:\n                arr[left], arr[right] = arr[right], arr[left]\n            elif arr[left+1] == arr[right]:\n                arr[left], arr[right] = arr[right], arr[left]\n            else:\n                arr[left], arr[right-1] = arr[right-1], arr[left]\n        \n        left += 1\n        right -= 1\n    \n    return count\n"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    total_len = len(lst1) + len(lst2)\n    if total_len < len(lst1):\n        return lst1\n    elif total_len < len(lst2):\n        return lst2\n    else:\n        return lst1\n"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    if a < 100:\n        return False\n    factors = []\n    for i in range(2, int(a**0.5) + 1):\n        if a % i == 0:\n            factors.append(i)\n            factors.append(a // i)\n    factors.sort()\n    for i in range(len(factors) - 1):\n        if factors[i] * factors[i+1] == a:\n            return True\n    return False\n"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if x == 0:\n        return False\n    elif x == 1:\n        return True\n    elif n == 1:\n        return True\n    elif n == 0:\n        return False\n    else:\n        return is_simple_power(x, n // 2)\n"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    if a < 0:\n        return False\n    elif a == 0:\n        return True\n    else:\n        return a ** 3 == a\n"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    if not num:\n        return 0\n    \n    count = 0\n    for char in num:\n        if char.isalpha():\n            count += 1\n    \n    return count\n"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]  # 将十进制转换为二进制，并去掉前缀\"0b\"\n    extra_chars = 2  # 额外的字符数\n    return \"db\" + binary + \"db\" * extra_chars\n"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    return letter_grades\n"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    if len(string) == 1:\n        return False\n    elif len(string) == 2:\n        return True\n    elif len(string) == 3:\n        return True\n    elif len(string) == 4:\n        return False\n    else:\n        for i in range(2, int(len(string) ** 0.5) + 1):\n            if len(string) % i == 0:\n                return False\n        return True\n"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    count = 0\n    for i in range(1, n+1):\n        if i % 10 == 1 or i % 10 == 0:\n            count += 1\n    return count\n# 测试代码\nprint(starts_one_ends(10))  # 输出：2\nprint(starts_one_ends(100))  # 输出：10\nprint(starts_one_ends(1000))  # 输出：100\n"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    binary = bin(N)[2:]  # 将N转换为二进制形式，并去掉前缀\"0b\"\n    return ''.join(str(int(digit)) for digit in binary)  # 将二进制数转换为字符串\n"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            total += lst[i]\n    return total\n"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    words = s.split()\n    new_words = []\n    for word in words:\n        new_word = ''.join(sorted(word))\n        new_words.append(new_word)\n    return ' '.join(new_words)\n"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    if not lst:\n        return []\n    \n    sorted_lst = sorted(lst, key=lambda row: (sorted(row), sorted(row, reverse=True)))\n    return [(row.index(x), row.index(x)) for row in sorted_lst]\n"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if array[0] + array[-1] % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_val = ord(char)\n            shifted_val = (ascii_val - ord('a') + 2) % 26 + ord('a')\n            encrypted += chr(shifted_val)\n        else:\n            encrypted += char\n    return encrypted\n"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    else:\n        return min(lst[1:])\n"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    words = S.split()\n    for word in words:\n        if word.startswith(\"I\"):\n            return True\n    return False\n"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if x == y + z or x == z + y or y == x + z or y == z + x or z == x + y or z == y + x:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    encoded_message = ''\n    for char in message:\n        if char.lower() in vowels:\n            encoded_message += chr(ord(char.lower()) + 2)\n        else:\n            encoded_message += char\n    return encoded_message\n"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    max_prime = 0\n    for num in lst:\n        if num == 0:\n            continue\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            max_prime = max(max_prime, num)\n    return sum(int(digit) for digit in str(max_prime))\n"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not key.islower() and not key.isupper():\n            return False\n    return True\n"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    primes = []\n    for num in range(2, n+1):\n        is_prime = True\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes\n"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    return a % 10 * b % 10\n"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper():\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    try:\n        num = float(value)\n        if num == int(num):\n            return int(num)\n        else:\n            return int(num) + 1\n    except ValueError:\n        return None\n"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    pile = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = (n + 1) // 2\n        pile.append(n)\n    return pile\n"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    words = s.split(\",\")\n    return words\n"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    for num in range(x, y+1):\n        if num % 2 == 0:\n            return num\n    return -1\n"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total = 0\n    count = 0\n    \n    for i in range(n, m+1):\n        total += i\n        count += 1\n    \n    average = total / count\n    binary = bin(average)[2:]\n    \n    return binary\n"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    result = []\n    for num in x:\n        if '0' not in str(num) and '2' not in str(num) and '4' not in str(num) and '6' not in str(num) and '8' not in str(num):\n            result.append(num)\n    return result\n"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    if not arr:\n        return []\n    try:\n        sorted_arr = sorted(arr)\n        reversed_arr = sorted_arr[::-1]\n        result = []\n        for num in reversed_arr:\n            if num == 1 or num == 9:\n                result.append(\"One\")\n            elif num == 2 or num == 8:\n                result.append(\"Two\")\n            elif num == 3 or num == 7:\n                result.append(\"Three\")\n            elif num == 4 or num == 6:\n                result.append(\"Four\")\n            elif num == 5:\n                result.append(\"Five\")\n        return result\n    except:\n        return []\n"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(1)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return False\n    \n    return True\n"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    count = 0\n    for i in range(len(lst1)):\n        if lst1[i] % 2 == 0:\n            count += 1\n    if count == len(lst1):\n        return \"YES\"\n    else:\n        return \"NO\"\n"}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    if not test:\n        return {}\n    \n    histogram_dict = {}\n    for char in test:\n        if char in histogram_dict:\n            histogram_dict[char] += 1\n        else:\n            histogram_dict[char] = 1\n    \n    max_count = max(histogram_dict.values())\n    result = {}\n    for char, count in histogram_dict.items():\n        if count == max_count:\n            result[char] = count\n    \n    return result\n"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s,c):\n    result = ''\n    is_palindrome = True\n    for char in s:\n        if char not in c:\n            result += char\n        else:\n            is_palindrome = False\n    return result, is_palindrome\n"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for string in lst:\n        count = 0\n        for char in string:\n            if char.isdigit():\n                count += int(char) % 2 != 0\n        result.append(f\"the number of odd elements {count}n the str{string}ng {string} of the {string}nput.\")\n    return result\n"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n    \n    current_sum = nums[0]\n    min_sum = nums[0]\n    \n    for i in range(1, len(nums)):\n        current_sum = max(nums[i], current_sum + nums[i])\n        min_sum = min(min_sum, current_sum)\n    \n    return min_sum\n"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    import math\n    rows = len(grid)\n    cols = len(grid[0])\n    max_fill_count = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                if j == 0:\n                    if grid[i][j+1] == 0:\n                        grid[i][j] = 0\n                        grid[i][j+1] = capacity\n                        max_fill_count += 1\n                elif j == cols-1:\n                    if grid[i][j-1] == 0:\n                        grid[i][j] = 0\n                        grid[i][j-1] = capacity\n                        max_fill_count += 1\n                else:\n                    if grid[i][j-1] == 0 and grid[i][j+1] == 0:\n                        grid[i][j] = 0\n                        grid[i][j-1] = capacity\n                        grid[i][j+1] = capacity\n                        max_fill_count += 1\n    return max_fill_count\n"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    count = [0] * 10\n    for num in arr:\n        count[num] += 1\n    result = []\n    for i in range(10):\n        if count[i] > 0:\n            result.extend([i] * count[i])\n    return result\n"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    words = s.split()\n    result = []\n    for word in words:\n        if len(word) >= n and all(vowel in word for vowel in vowels):\n            result.append(word)\n    return result\n"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(word)-1, -1, -1):\n        if word[i].lower() in vowels:\n            return word[i]\n    return \"\"\n"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    stack = []\n    for s in lst:\n        if s == '(':\n            stack.append(s)\n        elif s == ')':\n            if len(stack) == 0 or stack[-1] != '(':\n                return 'No'\n            stack.pop()\n    return 'Yes' if len(stack) == 0 else 'No'\n"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]\n"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            total += lst[i]\n    return total\n"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    count = 0\n    for i in range(k):\n        if len(str(arr[i])) > 1:\n            count += arr[i]\n    return count\n"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    collatz_sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = n * 3 + 1\n        collatz_sequence.append(n)\n    return collatz_sequence\n"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    if not date:\n        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 31:\n                return False\n        return True\n    except ValueError:\n        return False\n"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    words = txt.split()\n    if len(words) == 1 and ',' in txt:\n        return txt.split(',')\n    elif len(words) == 1 and ' ' in txt:\n        return txt.split(' ')\n    else:\n        return [chr(i) for i in range(ord('a'), ord('z')+1) if i % 2 != 0]\n"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n    \n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    \n    return True\n"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    else:\n        return \"YES\"\n"}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    result = 1\n    for num in arr:\n        if num == 0:\n            return None\n        elif num < 0:\n            result *= -1\n        else:\n            result *= 1\n    \n    return result\n"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    n = len(grid)\n    visited = [[False] * n for _ in range(n)]\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    def dfs(i, j, path, lst):\n        if len(path) == k:\n            return lst\n        visited[i][j] = True\n        for dx, dy in directions:\n            ni, nj = i + dx, j + dy\n            if 0 <= ni < n and 0 <= nj < n and not visited[ni][nj]:\n                if grid[ni][nj] == 0:\n                    visited[ni][nj] = True\n                    lst.append(grid[ni][nj])\n                    result = dfs(ni, nj, path + [grid[ni][nj]], lst)\n                    if result:\n                        return result\n                    lst.pop()\n                    visited[ni][nj] = False\n        return None\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 0:\n                visited[i][j] = True\n                lst = [grid[i][j]]\n                result = dfs(i, j, [grid[i][j]], lst)\n                if result:\n                    return result\n                visited[i][j] = False\n    return []\n"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    else:\n        tri_list = [1, 3]\n        for i in range(3, n + 1):\n            tri_list.append(tri_list[i - 1] + tri_list[i - 2] + tri_list[i - 3])\n        return tri_list\n"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product = 1\n    for i in range(1, n+1, 2):\n        product *= i\n    return product\n"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0 or stack[-1] != '[':\n                return False\n            stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    result = 0\n    for num in lst:\n        rounded_num = round(num)\n        result += rounded_num ** 2\n    return result\n"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith(\" \"):\n        return False\n    elif txt.endswith("}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i] <= arr[i-1]:\n            return i\n    return -1\n"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    if not lst:\n        return None, None\n    \n    negative_nums = [num for num in lst if num < 0]\n    positive_nums = [num for num in lst if num > 0]\n    \n    if not negative_nums:\n        return None, positive_nums[0]\n    elif not positive_nums:\n        return negative_nums[0], None\n    \n    return min(negative_nums), max(positive_nums)\n"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if isinstance(a, int) and isinstance(b, int):\n        return a if a > b else b\n    elif isinstance(a, float) and isinstance(b, float):\n        return a if a > b else b\n    elif isinstance(a, str) and isinstance(b, str):\n        return a if a > b else b\n    else:\n        return None\n"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    if n % 4 != 0:\n        return False\n    for i in range(1, n//4+1):\n        if i % 2 == 0 and (n - i) % 2 == 0:\n            return True\n    return False\n"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result\n"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    result = \"\"\n    i = 0\n    while i < len(text):\n        if text[i] == \" \":\n            if i+1 < len(text) and text[i+1] == \" \":\n                result += \"-\"\n                i += 1\n            else:\n                result += \"_\"\n        else:\n            result += text[i]\n        i += 1\n    return result\n"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if len(file_name) > 3:\n        return 'No'\n    if '.' not in file_name:\n        return 'No'\n    if file_name[0].isalpha():\n        return 'No'\n    if file_name[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 != 0:\n            total += lst[i] ** 3\n    return total\n"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = []\n    for word in words:\n        if len(word) in [2, 3, 5, 7]:\n            prime_words.append(word)\n    return \" \".join(prime_words)\n"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    numerator_x, denominator_x = map(int, x.split('/'))\n    numerator_n, denominator_n = map(int, n.split('/'))\n    if numerator_x * numerator_n == denominator_x * denominator_n:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    def digit_sum(num):\n        return sum(int(digit) for digit in str(num))\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))\n"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 2 == 1 or num % 2 == -1):\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        idx1 = planets.index(planet1)\n        idx2 = planets.index(planet2)\n        if idx1 < idx2:\n            return planets[idx1:idx2+1]\n        else:\n            return planets[idx2:idx1+1]\n"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    def get_word_length(word):\n        return len(word)\n    def get_word_length_key(word):\n        return get_word_length(word)\n    def get_word_length_reverse_key(word):\n        return -get_word_length(word)\n    def get_word_length_reverse_key_reverse(word):\n        return -get_word_length_reverse_key(word)\n    def get_word_length_reverse_key_reverse_reverse(word):\n        return -get_word_length_reverse_key_reverse(word)\n    words = sorted(lst, key=get_word_length_key)\n    words = sorted(words, key=get_word_length_reverse_key, reverse=True)\n    words = sorted(words, key=get_word_length_reverse_key_reverse, reverse=True)\n    words = sorted(words, key=get_word_length_reverse_key_reverse_reverse, reverse=True)\n    return words\n"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    if n == 2:\n        return x\n    elif n == 3:\n        return y\n    else:\n        return x_or_y(n-1, x, y)\n"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    result = 0\n    for num in lst:\n        if num < 0 or not isinstance(num, int):\n            continue\n        result += num ** 2\n    return result\n"}
{"task_id": "HumanEval/152", "completion": "def compare(game,guess):\n    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result\n"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    class_name = class_name.upper()\n    extensions = [ext.upper() for ext in extensions]\n    max_strength = -1\n    strongest_extension = None\n    for ext in extensions:\n        strength = len(ext) - len(ext.lower())\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = ext\n    return f\"{class_name}.{strongest_extension}\"\n"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a , b):\n    if b in a or a in b:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_dict = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cd',\n        500: 'd',\n        900: 'cm',\n        1000: 'm'\n    }\n    result = ''\n    for value, symbol in roman_dict.items():\n        while number >= value:\n            result += symbol\n            number -= value\n    return result\n"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_chars:\n            max_chars = len(unique_chars)\n            max_word = word\n    return max_word\n"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    if need <= remaining:\n        return [need, remaining - need]\n    else:\n        return [number, remaining]\n"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i-1] == '+':\n            result += operand[i]\n        elif operator[i-1] == '-':\n            result -= operand[i]\n        elif operator[i-1] == '*':\n            result *= operand[i]\n        elif operator[i-1] == '//':\n            result //= operand[i]\n        elif operator[i-1] == '**':\n            result **= operand[i]\n    return result\n# 测试样例\noperator = ['+', '*', '-']\noperand = [2, 3, 4, 5]\nresult = do_algebra(operator, operand)\nprint(result)  # 输出：9\n"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    return result[::-1]\n"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    result = []\n    for num in range(a, b+1):\n        if num % 2 == 0:\n            result.append(num)\n    return result\n"}
