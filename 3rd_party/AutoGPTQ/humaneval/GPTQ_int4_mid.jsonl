{"task_id": "HumanEval/0", "completion": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False\n"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    current_group = ''\n    \n    for char in paren_string:\n        if char == '(':\n            current_group += char\n        elif char == ')':\n            if current_group:\n                groups.append(current_group)\n                current_group = ''\n        else:\n            current_group += char\n    \n    if current_group:\n        groups.append(current_group)\n    \n    return groups\n"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    return number - int(number)\n"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    for i in range(len(operations) - 1):\n        if operations[i] < 0 and operations[i+1] >= 0:\n            return True\n    return False\n"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = [abs(x - mean) for x in numbers]\n    return sum(deviation) / len(numbers)\n"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers, delimeter):\n    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result\n"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string):\n    stack = []\n    max_levels = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n            else:\n                max_levels.append(0)\n        else:\n            max_levels.append(len(stack))\n    return max_levels\n"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings\n"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    return (sum(numbers), 1)\n"}
{"task_id": "HumanEval/9", "completion": "from typing import List, Tuple\n\ndef rolling_max(numbers):\n    max_value = numbers[0]\n    result = [max_value]\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_value:\n            max_value = numbers[i]\n        result.append(max_value)\n    return result\n"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" 检查给定的字符串是否是回文。 \"\"\"\n    return string == string[::-1]\ndef make_palindrome(string: str) -> str:\n    \"\"\"找到以给定的字符串开头的最短回文。算法思想很简单：-找到给定字符串的最长回文后缀。—将回文后缀前的字符串反转，附加到给定字符串的末尾。\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    else:\n        return string + string[::-1]\n"}
{"task_id": "HumanEval/11", "completion": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += \"0\"\n        else:\n            result += \"1\"\n    return result\n"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    \n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    \n    return longest_string\n"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes\n"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1))\n"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    distinct_chars = set()\n    for char in string.lower():\n        if char.isalpha():\n            distinct_chars.add(char)\n    return len(distinct_chars)\n"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\ndef parse_music(music_string):\n    notes = []\n    current_note = ''\n    for char in music_string:\n        if char == 'o':\n            notes.append(4)\n            current_note = ''\n        elif char == '|':\n            notes.append(2)\n            current_note = ''\n        elif char == '.':\n            notes.append(1)\n            current_note = ''\n        else:\n            current_note += char\n    return notes\n"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start == 0:\n            break\n        count += 1\n    return count\n"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\ndef sort_numbers(numbers):\n    numbers = numbers.split()\n    numbers = [int(num) for num in numbers]\n    numbers.sort()\n    return ' '.join(str(num) for num in numbers)\n"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers):\n    closest_pair = None\n    min_diff = float('inf')\n    \n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            closest_pair = (numbers[i], numbers[i+1])\n            min_diff = diff\n    \n    return closest_pair\n"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    rescaled_numbers = [(num - min_num) / (max_num - min_num) for num in numbers]\n    return rescaled_numbers\n"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]\n"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)\n"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n    return factors\n"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers):\n    counts = {}\n    for num in numbers:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    \n    result = []\n    for num in numbers:\n        if counts[num] == 1:\n            result.append(num)\n    \n    return result\n"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result\n"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\n"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]\n"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [x for x in l if x > 0]\n"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    求解点x处系数为xs的多项式。\n    返回xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n。\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\ndef find_zero(xs: list):\n    \"\"\"\n    xs是多项式的系数。find_zero返回poly(x)= 0时的解。函数find_zero只返回一个零点，即使有多个零点。此外，函数find_zero只接受具有偶数个系数和最大非零系数的列表xs，因为这样可以保证有一个解。\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    # 判断系数列表是否满足条件\n    if len(xs) % 2 != 0 or max(xs) == 0:\n        return None\n    # 求解零点\n    roots = []\n    for i in range(len(xs)):\n        if poly(xs, i) == 0:\n            roots.append(i)\n    return roots\n"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l):\n    l_prime = []\n    for i in range(len(l)):\n        if i % 3 != 0:\n            l_prime.append(l[i])\n    l_prime.sort()\n    return l_prime\n"}
{"task_id": "HumanEval/34", "completion": "def unique(l):\n    return list(set(l))\n"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    return max(l)\n"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n):\n    count = 0\n    for num in range(1, n+1):\n        if num % 11 == 0 or num % 13 == 0:\n            if num % 7 == 0:\n                count += 1\n    return count\n"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l):\n    l_prime = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_prime.append(l[i])\n    return l_prime\n"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    \"\"\"\n    返回通过循环移动3个字符编码的字符串。\n    \"\"\"\n    # 将字符串拆分为组，每个组的长度为3。\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # 在每个组中循环元素，除非该组的元素少于3个。\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\ndef decode_cyclic(s: str):\n    \"\"\"\n    输入encode_cyclic函数编码的字符串，返回解码后的字符串。\n    \"\"\"\n    # 将字符串拆分为组，每个组的长度为3。\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # 在每个组中循环元素，除非该组的元素少于3个。\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    def fib(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fib(n-1) + fib(n-2)\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        fib_num = fib(n)\n        if is_prime(fib_num):\n            return fib_num\n        else:\n            return prime_fib(n-1)\n"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    if len(l) < 3:\n        return False\n    l.sort()\n    for i in range(len(l) - 2):\n        if l[i] + l[i+1] + l[i+2] == 0:\n            return True\n    return False\n"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n):\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                count += 1\n    return count\n# 测试代码\nprint(car_race_collision(3))  # 输出6\nprint(car_race_collision(5))  # 输出25\nprint(car_race_collision(10))  # 输出45\n"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [x + 1 for x in l]\n"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    return len(l) > 1 and sum(l) == 0\n"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    result = ''\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n    return result\n"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return 0.5 * a * h\n"}
{"task_id": "HumanEval/46", "completion": "def fib4(n):\n    if n <= 2:\n        return 0\n    elif n == 3:\n        return 2\n    else:\n        fib_prev = 0\n        fib_prev_prev = 2\n        fib_prev_prev_prev = 0\n        for i in range(4, n+1):\n            fib_curr = fib_prev + fib_prev_prev + fib_prev_prev_prev\n            fib_prev_prev_prev = fib_prev_prev\n            fib_prev_prev = fib_prev\n            fib_prev = fib_curr\n        return fib_curr\n"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    n = len(l)\n    if n % 2 == 0:\n        mid1 = l[n // 2 - 1]\n        mid2 = l[n // 2]\n        return (mid1 + mid2) / 2\n    else:\n        return l[n // 2]\n"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    # 去除字符串中的非字母字符，并转换为小写\n    clean_text = ''.join(c.lower() for c in text if c.isalpha())\n    \n    # 判断字符串是否与其反转后的字符串相等\n    return clean_text == clean_text[::-1]\n"}
{"task_id": "HumanEval/49", "completion": "def modp(n, p):\n    return pow(2, n, p)\n"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    \"\"\"\n    返回通过在字母表中将每个字符移动5位得到的编码字符串。\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\ndef decode_shift(s: str):\n    \"\"\" \n    输入encode_shift函数编码的字符串。返回解码的字符串。\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = ''\n    for char in text:\n        if char.lower() not in vowels:\n            result += char\n    return result\n"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    for num in l:\n        if num >= t:\n            return False\n    return True\n"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    return x + y\n"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0, s1):\n    if len(s0) != len(s1):\n        return False\n    \n    for i in range(len(s0)):\n        if s0[i] != s1[i]:\n            return False\n    \n    return True\n"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return b\n"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0 or stack[-1] != \"<\":\n                return False\n            stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l):\n    if l == sorted(l):\n        return True\n    elif l == sorted(l, reverse=True):\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    set1 = set(l1)\n    set2 = set(l2)\n    return list(set1.intersection(set2))\n"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n-1)\n"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if len(stack) == 0 or stack[-1] != \"(\":\n                return False\n            stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs):\n    result = []\n    for i in range(1, len(xs)):\n        result.append(i * xs[i])\n    return result\n"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n):\n    if n <= 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    digits = str(x)\n    shift %= len(digits)\n    if shift == 0:\n        return str(x)\n    else:\n        return digits[-shift:] + digits[:-shift]\n"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total\n"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s,n):\n    apples = int(s[:s.index(' ')])\n    oranges = int(s[s.index(' ')+1:s.index(' ')+s[s.index(' ')+1:].index(' ')])\n    total_fruits = apples + oranges\n    if total_fruits == n:\n        return 0\n    elif total_fruits > n:\n        return n - apples - oranges\n    else:\n        return n - total_fruits\n"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    if not arr:\n        return []\n    \n    min_even = float('inf')\n    min_even_index = -1\n    \n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < min_even:\n            min_even = num\n            min_even_index = i\n    \n    return [min_even, min_even_index] if min_even_index != -1 else []\n"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    count = {}\n    for num in lst:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    \n    max_freq = -1\n    for num in lst:\n        if count[num] >= max_freq:\n            max_freq = count[num]\n            max_num = num\n    \n    return max_num\n"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    if not lst:\n        return []\n    \n    min_val = min(lst)\n    max_val = max(lst)\n    \n    result = []\n    for i in range(min_val, max_val+1):\n        result.append(i)\n    \n    return result\n"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q,w):\n    if sum(q) <= w and q == q[::-1]:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    if n <= 2:\n        return 0\n    \n    left = 0\n    right = n - 1\n    \n    while left < right:\n        if arr[left] != arr[right]:\n            return -1\n        left += 1\n        right -= 1\n    \n    return 0\n"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    if len(lst1) < len(lst2):\n        return [s for s in lst1 if s not in lst2]\n    elif len(lst1) > len(lst2):\n        return [s for s in lst2 if s not in lst1]\n    else:\n        return lst1\n"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    if a < 100:\n        return False\n    \n    factors = []\n    for i in range(2, int(a**0.5) + 1):\n        if a % i == 0:\n            factors.append(i)\n            factors.append(a // i)\n            break\n    \n    if len(factors) == 2:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if x == 0:\n        return False\n    elif x == 1:\n        return True\n    elif n == 1:\n        return True\n    elif n == 0:\n        return False\n    else:\n        return (x % n) == 0\n"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    if a == 0:\n        return True\n    elif a < 0:\n        return False\n    else:\n        return a ** 3 == a\n"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    count = 0\n    for char in num:\n        if char.isalpha():\n            count += 1\n    return count\ndef count_prime_hex_digits(num):\n    count = 0\n    for char in num:\n        if char.isalpha():\n            if char.upper() == 'B':\n                count += 1\n            elif char.upper() == 'D':\n                count += 1\n    return count\ndef count_prime_hex_digits_with_function(num):\n    count = 0\n    for char in num:\n        if char.isalpha():\n            if char.upper() == 'B':\n                count += 1\n            elif char.upper() == 'D':\n                count += 1\n    return count\n# 测试样例\nprint(hex_key(\"AB\"))  # 输出: 1\nprint(hex_key(\"1077E\"))  # 输出: 2\nprint(hex_key(\"ABED1A33\"))  # 输出: 4\nprint(hex_key(\"123456789ABCDEF0\"))  # 输出: 6\nprint(hex_key(\"2020\"))  # 输出: 2\nprint(count_prime_hex_digits(\"AB\"))  # 输出: 1\nprint(count_prime_hex_digits(\"1077E\"))  # 输出: 2\nprint(count_prime_hex_digits(\"ABED1A33\"))  # 输出: 4\nprint(count_prime_hex_digits(\"123456789ABCDEF0\"))  # 输出: 6\nprint(count_prime_hex_digits(\"2020\"))  # 输出: 2\nprint(count_prime_hex_digits_with_function(\"AB\"))  # 输出: 1\nprint(count_prime_hex_digits_with_function(\"1077E\"))  # 输出: 2\nprint(count_prime_hex_digits_with_function(\"ABED1A33\"))  # 输出: 4\nprint(count_prime_hex_digits_with_function(\"123456789ABCDEF0\"))  # 输出: 6\nprint(count_prime_hex_digits_with_function(\"2020\"))  # 输出: 2\n"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]  # 将十进制转换为二进制，并去除前缀\"0b\"\n    return \"db\" + binary + \"db\"\n"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    return letter_grades\n"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    if len(string) == 1:\n        return False\n    elif len(string) == 2:\n        return True\n    elif len(string) % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(len(string)**0.5)+1, 2):\n            if len(string) % i == 0:\n                return False\n        return True\n"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    count = 0\n    for i in range(1, n+1):\n        if i % 10 == 1 or i % 10 == 0:\n            count += 1\n    return count\n# 测试代码\nprint(starts_one_ends(10))  # 输出：2\nprint(starts_one_ends(15))  # 输出：3\nprint(starts_one_ends(20))  # 输出：4\n"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    binary = bin(N)[2:]  # 将N转换为二进制形式，并去掉前缀\"0b\"\n    return ''.join(str(int(digit)) for digit in binary)  # 将二进制数的每一位转换为字符串并拼接起来\n# 测试代码\nprint(solve(1000))  # 输出: \"1\"\nprint(solve(150))   # 输出: \"110\"\nprint(solve(147))   # 输出: \"1100\"\n"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            result += lst[i]\n    return result\n"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    words = s.split()\n    new_words = []\n    for word in words:\n        new_word = ''.join(sorted(word))\n        new_words.append(new_word)\n    return ' '.join(new_words)\n"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    if not lst:\n        return []\n    \n    rows = sorted(lst, key=lambda row: (row[0], -row[1]))\n    return [(row[0], row[1]) for row in rows if row[1] == x]\n"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if len(array) == 0:\n        return []\n    elif len(array) == 1:\n        return array\n    elif sum(array[:len(array)//2]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_val = ord(char)\n            shifted_ascii_val = (ascii_val - ord('a') + 2) % 26 + ord('a')\n            encrypted += chr(shifted_ascii_val)\n        else:\n            encrypted += char\n    return encrypted\n"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    else:\n        return min(lst[1:])\n"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    count = 0\n    words = S.split()\n    for word in words:\n        if word.startswith(\"I\"):\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if x == y + z or x == z + y or y == x + z or y == z + x or z == x + y or z == y + x:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    encoded_message = ''\n    for char in message:\n        if char.lower() in vowels:\n            encoded_message += chr(ord(char.lower()) + 2)\n        else:\n            encoded_message += char\n    return encoded_message\n"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    max_prime = 0\n    for num in lst:\n        if num == 0:\n            continue\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            max_prime = max(max_prime, num)\n    return sum(int(digit) for digit in str(max_prime))\n"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n    \n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        \n        if not key.islower() and not key.isupper():\n            return False\n    \n    return True\n"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    primes = []\n    for num in range(2, n+1):\n        is_prime = True\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes\n"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    return (a % 10) * (b % 10)\n"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper():\n            count += 1\n    return count\n# 测试样例\nprint(count_upper('aBCdEf'))  # 输出 1\nprint(count_upper('abcdefg'))  # 输出 0\nprint(count_upper('dBBE'))  # 输出 0\n"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    value = float(value)\n    if value >= 0:\n        return int(value)\n    else:\n        return int(value) - 1\n"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    pile = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = (n + 1) // 2\n        pile.append(n)\n    return pile\n"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    words = s.split(\",\")\n    return words\n# 测试样例\nprint(words_string(\"Hi, my name is John\"))  # 输出: [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nprint(words_string(\"One, two, three, four, five, six\"))  # 输出: [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    for num in range(x, y+1):\n        if num % 2 == 0:\n            return num\n    return -1\n"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        return bin(round((n + m) / 2))[2:]\n"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    result = []\n    for num in x:\n        if num % 2 != 0:\n            result.append(num)\n    return result\n"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    if not arr:\n        return []\n    \n    sorted_arr = sorted(arr)\n    reversed_arr = sorted_arr[::-1]\n    \n    result = []\n    for num in reversed_arr:\n        if num == 1:\n            result.append(\"One\")\n        elif num == 2:\n            result.append(\"Two\")\n        elif num == 3:\n            result.append(\"Three\")\n        elif num == 4:\n            result.append(\"Four\")\n        elif num == 5:\n            result.append(\"Five\")\n        elif num == 6:\n            result.append(\"Six\")\n        elif num == 7:\n            result.append(\"Seven\")\n        elif num == 8:\n            result.append(\"Eight\")\n        elif num == 9:\n            result.append(\"Nine\")\n    \n    return result\n"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return False\n    \n    return True\n"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    count = 0\n    for i in range(len(lst1)):\n        if lst1[i] % 2 == 0:\n            count += 1\n    if count == len(lst1):\n        return \"YES\"\n    else:\n        return \"NO\"\n"}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    if not test:\n        return {}\n    \n    histogram_dict = {}\n    for char in test:\n        if char in histogram_dict:\n            histogram_dict[char] += 1\n        else:\n            histogram_dict[char] = 1\n    \n    max_count = max(histogram_dict.values())\n    max_letters = [char for char, count in histogram_dict.items() if count == max_count]\n    \n    return {char: count for char, count in histogram_dict.items() if count == max_count}\n"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s,c):\n    result = ''\n    is_palindrome = True\n    for char in s:\n        if char not in c:\n            result += char\n        else:\n            is_palindrome = False\n    return result, is_palindrome\n# 测试样例\nprint(reverse_delete(\"abcde\", \"ae\"))  # ('bcd', False)\nprint(reverse_delete(\"abcdef\", \"b\"))  # ('acdef', False)\nprint(reverse_delete(\"abcdedcba\", \"ab\"))  # ('cdedc', True)\n"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for string in lst:\n        count = 0\n        for char in string:\n            if char.isdigit():\n                count += int(char) % 2\n        result.append(f\"the number of odd elements {count}n the str{string}ng {string} of the {string}nput.\")\n    return result\n"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n    \n    current_sum = nums[0]\n    min_sum = nums[0]\n    \n    for i in range(1, len(nums)):\n        current_sum = max(nums[i], current_sum + nums[i])\n        min_sum = min(min_sum, current_sum)\n    \n    return min_sum\n"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    import math\n    rows = len(grid)\n    cols = len(grid[0])\n    max_fill_count = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                if j + 1 < cols and grid[i][j+1] == 1:\n                    if j + 2 < cols and grid[i][j+2] == 1:\n                        if j + 3 < cols and grid[i][j+3] == 1:\n                            if j + 4 < cols and grid[i][j+4] == 1:\n                                if j + 5 < cols and grid[i][j+5] == 1:\n                                    if j + 6 < cols and grid[i][j+6] == 1:\n                                        if j + 7 < cols and grid[i][j+7] == 1:\n                                            if j + 8 < cols and grid[i][j+8] == 1:\n                                                if j + 9 < cols and grid[i][j+9] == 1:\n                                                    if j + 10 < cols and grid[i][j+10] == 1:\n                                                        if j + 11 < cols and grid[i][j+11] == 1:\n                                                            if j + 12 < cols and grid[i][j+12] == 1:\n                                                                if j + 13 < cols and grid[i][j+13] == 1:\n                                                                    if j + 14 < cols and grid[i][j+14] == 1:\n                                                                        if j + 15 < cols and grid[i][j+15] == 1:\n                                                                            if j + 16 < cols and grid[i][j+16] == 1:\n                                                                                if j + 17 < cols and grid[i][j+17] == 1:\n                                                                                    if j + 18 < cols and grid[i][j+18] == 1:\n                                                                                        if j + 19 < cols and grid[i][j+19] == 1:\n                                                                                            if j + 20 < cols and grid[i][j+20] == 1:\n                                                                                                if j + 21 < cols and grid[i][j+21] == 1:\n                                                                                                    if j + 22 < cols and grid[i][j+22] == 1:\n                                                                                                        if j + 23 < cols and grid[i][j+23] == 1:\n                                                                                                            if j + 24 < cols and grid[i][j+24] == 1:\n                                                                                                                if j + 25 < cols and grid[i][j+25] == 1:\n                                                                                                                    i"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    count = [0] * 10\n    for num in arr:\n        count[num] += 1\n    result = []\n    for i in range(10):\n        if count[i] > 0:\n            result.extend([i] * count[i])\n    return result\n"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    words = s.split()\n    result = []\n    \n    for word in words:\n        if len(word) >= n and all(char.lower() in vowels for char in word):\n            result.append(word)\n    \n    return result\n"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(word)-1, -1, -1):\n        if word[i].lower() in vowels:\n            return word[i].lower()\n    return \"\"\n"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    stack = []\n    for s in lst:\n        if s == '(':\n            stack.append(s)\n        elif s == ')':\n            if len(stack) == 0 or stack[-1] != '(':\n                return 'No'\n            stack.pop()\n    return 'Yes' if len(stack) == 0 else 'No'\n"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]\n"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            result += lst[i]\n    return result\n"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    if k == 0:\n        return 0\n    elif k == 1:\n        return arr[0]\n    else:\n        max_sum = 0\n        for i in range(k):\n            max_sum += arr[i]\n        return max_sum\n# 测试样例\narr = [111, 21, 3, 4000, 5, 6, 7, 8, 9]\nk = 4\nresult = add_elements(arr, k)\nprint(result)  # 输出：24\n"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    collatz_sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = n * 3 + 1\n        collatz_sequence.append(n)\n    return collatz_sequence\n"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    if not date:\n        return False\n    \n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    month, day, year = map(int, parts)\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    else:\n        if day < 1 or day > 31:\n            return False\n    \n    if year < 1000 or year > 9999:\n        return False\n    \n    return True\n"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    words = txt.split()\n    if ',' in txt:\n        words = txt.split(',')\n    odd_letters = sum(ord(c) % 2 for c in txt if c.isalpha())\n    return words, odd_letters\n"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n    \n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    \n    return True\n"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    if start1 > end2 or end1 < start2:\n        return \"NO\"\n    else:\n        return \"YES\"\n"}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    result = 1\n    for num in arr:\n        result *= num\n    \n    return result\n"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    n = len(grid)\n    visited = [[False] * n for _ in range(n)]\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    def dfs(i, j, path, visited):\n        if len(path) == k:\n            return path\n        for dx, dy in directions:\n            new_i, new_j = i + dx, j + dy\n            if 0 <= new_i < n and 0 <= new_j < n and not visited[new_i][new_j]:\n                visited[new_i][new_j] = True\n                result = dfs(new_i, new_j, path + [grid[new_i][new_j]], visited)\n                if result:\n                    return result\n                visited[new_i][new_j] = False\n        return None\n    for i in range(n):\n        for j in range(n):\n            visited[i][j] = True\n            result = dfs(i, j, [grid[i][j]], visited)\n            if result:\n                return result\n            visited[i][j] = False\n    return []\n"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    else:\n        tri_list = [1, 3]\n        for i in range(3, n + 1):\n            tri_list.append(tri_list[i - 1] + tri_list[i - 2] + tri_list[i - 3])\n        return tri_list\n"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 == 0:\n            continue\n        product *= int(digit)\n    return product\n# 测试代码\nprint(digits(1))  # 输出: 1\nprint(digits(4))  # 输出: 0\nprint(digits(235))  # 输出: 15\n"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0 or stack[-1] != '[':\n                return False\n            stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    result = []\n    for num in lst:\n        rounded_num = round(num)\n        result.append(rounded_num ** 2)\n    return sum(result)\n# 测试代码\nprint(sum_squares([1, 2, 3]))  # 输出 14\nprint(sum_squares([1, 4, 9]))  # 输出 98\nprint(sum_squares([1, 3, 5, 7]))  # 输出 84\nprint(sum_squares([1.4, 4.2, 0]))  # 输出 29\nprint(sum_squares([-2.4, 1, 1]))  # 输出 6\n"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if txt[-1].isalpha() and txt[-1] not in \" \":\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i] <= arr[i-1]:\n            return i\n    return -1\n# 测试样例\nprint(can_arrange([1,2,4,3,5]))  # 输出: 3\nprint(can_arrange([1,2,3]))  # 输出: -1\n"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    if not lst:\n        return (None, None)\n    \n    negative_nums = [num for num in lst if num < 0]\n    positive_nums = [num for num in lst if num > 0]\n    \n    if negative_nums:\n        return (max(negative_nums), min(positive_nums))\n    else:\n        return (None, min(positive_nums))\n"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if isinstance(a, int) and isinstance(b, int):\n        return a if a > b else b\n    elif isinstance(a, float) and isinstance(b, float):\n        return a if a > b else b\n    elif isinstance(a, str) and isinstance(b, str):\n        return a if a > b else b\n    else:\n        return None\n"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    if n % 4 != 0:\n        return False\n    for i in range(1, n // 2 + 1):\n        if i % 2 == 0 and (n - i) % 2 == 0:\n            return True\n    return False\n"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    result = 1\n    for i in range(2, n+1):\n        result *= i\n    return result\n"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    result = \"\"\n    for char in text:\n        if char == \" \":\n            result += \"_\"\n        elif char == \" \":\n            result += \"-\"\n        else:\n            result += char\n    return result\n"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if len(file_name) > 3:\n        return 'No'\n    if '.' not in file_name:\n        return 'No'\n    if not file_name[0].isalpha():\n        return 'No'\n    if file_name[1] != '.':\n        return 'No'\n    if file_name[2] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    total_sum = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            total_sum += num ** 2\n        elif i % 4 != 0:\n            total_sum += num ** 3\n    return total_sum\n"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = []\n    for word in words:\n        if len(word) in [2, 3, 5, 7]:\n            prime_words.append(word)\n    return ' '.join(prime_words)\n# 测试样例\nprint(words_in_sentence(\"This is a test\"))  # 输出：\"is\"\nprint(words_in_sentence(\"lets go for swimming\"))  # 输出：\"go for\"\n"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    # 将分数转换为小数\n    x_decimal = int(x.split('/')[0]) / int(x.split('/')[1])\n    n_decimal = int(n.split('/')[0]) / int(n.split('/')[1])\n    \n    # 判断结果是否为整数\n    if x_decimal * n_decimal == int(x_decimal * n_decimal):\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    def get_digit_sum(num):\n        return sum(int(digit) for digit in str(abs(num)))\n    return sorted(nums, key=lambda x: (get_digit_sum(x), nums.index(x)))\n"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 2 == 1 or (num // 10) % 2 == 1):\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            for k in range(j+1, len(a)):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count\nn = int(input(\"请输入正整数n：\"))\nresult = get_max_triples(n)\nprint(f\"满足条件的三元组数量为：{result}\")\n"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    elif planet1 == planet2:\n        return ()\n    else:\n        i = planets.index(planet1)\n        j = planets.index(planet2)\n        return tuple(planets[i+1:j])\n"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    def get_word_length(word):\n        return len(word)\n    def get_word_length_key(word):\n        return get_word_length(word)\n    def get_word_key(word):\n        return word\n    def get_word_key_key(word):\n        return word.lower()\n    def get_word_key_key_key(word):\n        return word.lower()\n    def get_word_key_key_key_key(word):\n        return word.lower()\n    def get_word_key_key_key_key_key(word):\n        return word.lower()\n    def get_word_key_key_key_key_key_key(word):\n        return word.lower()\n    def get_word_key_key_key_key_key_key_key(word):\n        return word.lower()\n    def get_word_key_key_key_key_key_key_key_key(word):\n        return word.lower()\n    def get_word_key_key_key_key_key_key_key_key_key(word):\n        return word.lower()\n    def get_word_key_key_key_key_key_key_key_key_key_key(word):\n        return word.lower()\n    def get_word_key_key_key_key_key_key_key_key_key_key_key(word):\n        return word.lower()\n    def get_word_key_key_key_key_key_key_key_key_key_key_key_key(word):\n        return word.lower()\n    def get_word_key_key_key_key_key_key_key_key_key_key_key_key_key(word):\n        return word.lower()\n    def get_word_key_key_key_key_key_key_key_key_key_key_key_key_key_key(word):\n        return word.lower()\n    def get_word_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key(word):\n        return word.lower()\n    def get_word_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key(word):\n        return word.lower()\n    def get_word_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key(word):\n        return word.lower()\n    def get_word_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key(word):\n        return word.lower()\n    def get_word_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key(word):\n        return word.lower()\n    def get_word_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key(word):\n        return word.lower()\n    def get_word_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key(word):\n        return word.lower()\n    def get_word_key_key"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    if n == 2:\n        return x\n    elif n == 3:\n        return y\n    else:\n        return x_or_y(n-1, x, y)\n"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    odd_nums = [num for num in lst if num % 2 != 0]\n    return sum([num**2 for num in odd_nums])\n"}
{"task_id": "HumanEval/152", "completion": "def compare(game,guess):\n    result = []\n    for i in range(len(game)):\n        result.append(abs(game[i] - guess[i]))\n    return result\n"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    class_name = class_name.lower()\n    extensions = [ext.lower() for ext in extensions]\n    max_strength = -1\n    strongest_extension = None\n    for ext in extensions:\n        strength = len(ext) - len(ext.replace(' ', ''))\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = ext\n    return f\"{class_name}.{strongest_extension}\"\n"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a , b):\n    if b in a or a in b:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    if number == 1:\n        return 'i'\n    elif number == 2:\n        return 'ii'\n    elif number == 3:\n        return 'iii'\n    elif number == 4:\n        return 'iv'\n    elif number == 5:\n        return 'v'\n    elif number == 6:\n        return 'vi'\n    elif number == 7:\n        return 'vii'\n    elif number == 8:\n        return 'viii'\n    elif number == 9:\n        return 'ix'\n    elif number == 10:\n        return 'x'\n    elif number == 11:\n        return 'xi'\n    elif number == 12:\n        return 'xii'\n    elif number == 13:\n        return 'xiii'\n    elif number == 14:\n        return 'xiv'\n    elif number == 15:\n        return 'xv'\n    elif number == 16:\n        return 'xvi'\n    elif number == 17:\n        return 'xvii'\n    elif number == 18:\n        return 'xviii'\n    elif number == 19:\n        return 'xix'\n    elif number == 20:\n        return 'xx'\n    elif number == 21:\n        return 'xxi'\n    elif number == 22:\n        return 'xxii'\n    elif number == 23:\n        return 'xxiii'\n    elif number == 24:\n        return 'xxiv'\n    elif number == 25:\n        return 'xxv'\n    elif number == 26:\n        return 'xxvi'\n    elif number == 27:\n        return 'xxvii'\n    elif number == 28:\n        return 'xxviii'\n    elif number == 29:\n        return 'xxix'\n    elif number == 30:\n        return 'xxx'\n    elif number == 31:\n        return 'xxxi'\n    elif number == 32:\n        return 'xxxii'\n    elif number == 33:\n        return 'xxxiii'\n    elif number == 34:\n        return 'xxxiv'\n    elif number == 35:\n        return 'xxxv'\n    elif number == 36:\n        return 'xxxvi'\n    elif number == 37:\n        return 'xxxvii'\n    elif number == 38:\n        return 'xxxviii'\n    elif number == 39:\n        return 'xxxix'\n    elif number == 40:\n        return 'xl'\n    elif number == 41:\n        return 'xli'\n    elif number == 42:\n        return 'xlii'\n    elif number == 43:\n        return 'xliii'\n    elif number == 44:\n        return 'xliv'\n    elif number == 45:\n        return 'xlv'\n    elif number == 46:\n        return 'xlvi'\n    elif number == 47:\n        return 'xlvii'\n    elif number == 48:\n        return 'xlviii'\n    elif number == 49:\n        return 'xlix'\n    elif number == 50:\n        return 'l'\n    elif number == 51:\n        return 'li'\n    elif number == 52:\n        return 'lii'\n    elif number == 53:\n        return 'liii'\n    elif number == 54:\n        return 'liv'\n    elif number == 55:\n        return 'lv'\n    elif number == 56:\n        return 'lvi'\n    elif number == 57:\n        return 'lvii'\n    elif numbe"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_chars:\n            max_chars = len(unique_chars)\n            max_word = word\n    return max_word\n"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    if number >= need:\n        return [need, remaining - need]\n    else:\n        return [number, remaining]\n"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i-1] == '+':\n            result += operand[i]\n        elif operator[i-1] == '-':\n            result -= operand[i]\n        elif operator[i-1] == '*':\n            result *= operand[i]\n        elif operator[i-1] == '//':\n            result //= operand[i]\n        elif operator[i-1] == '**':\n            result **= operand[i]\n    return result\n# 测试代码\noperator = ['+', '*', '-']\noperand = [2, 3, 4, 5]\nresult = do_algebra(operator, operand)\nprint(result)  # 输出：9\n"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    return result\n"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    result = []\n    for num in range(a, b+1):\n        if num % 2 == 0:\n            result.append(num)\n    return result\n"}
